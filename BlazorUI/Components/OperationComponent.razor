@using ManagingSelfFinanceWebAPI.Models
@using Data.Services.Interfaces
@inject IService<Operation> OperationsService


@if (CreateDialogOpen) {
    <DialogComponent Title="Create" OnClose="@OnCreateDialogClose">
        <OperationFormComponent Operation="@currentOperation" />
    </DialogComponent>
}

@if (UpdateDialogOpen) {
    <DialogComponent Title="Update" OnClose="@OnUpdateDialogClose">
        <OperationFormComponent Operation="@currentOperation" />
    </DialogComponent>
}

@if (DeleteDialogOpen) {
    <DialogComponent Title="Delete" OnClose="@OnDeleteDialogClose">
        Do you want to delete this entry?
    </DialogComponent>
}

<table class="table">
    <thead>
        <tr>
            <th>Operation Id</th>
            <th>Operation Name</th>
            <th>Operation Type</th>
            <th>
                <button type="button" class="btn" @onclick="() => OpenCreateDialog()">Create</button>
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var operation in Operations) {
             <tr>
                <td>@operation.Id</td>
                <td>@operation.Name</td>
                <td>@operation.TypeOperation</td>
                <td>
                    <button type="button" class="btn" @onclick="() => OpenUpdateDialog(operation)">Edit</button>
                    <button type="button" class="btn" @onclick="() => OpenDeleteDialog(operation)">Delete</button>
                </td>
              </tr>    
        }
    </tbody>
</table>

@code {
    [Parameter]
    public IEnumerable<Operation> Operations { get; set; } = new List<Operation>();
    [Parameter]
    public EventCallback OnUpdateCallback { get; set; }
    private Operation currentOperation;

    public bool DeleteDialogOpen { get; set; }

    private void OpenDeleteDialog(Operation operation) {
        DeleteDialogOpen = true;
        currentOperation = operation;
        StateHasChanged();
    }

    private async Task OnDeleteDialogClose(bool accepted) {
        DeleteDialogOpen = false;

        if (accepted) {
             await OperationsService.DeleteAsync(currentOperation.Id);
        }
        StateHasChanged();
        await OnUpdateCallback.InvokeAsync();
    }

    public bool CreateDialogOpen { get; set; }

    private void OpenCreateDialog() {
        CreateDialogOpen = true;
        currentOperation = new Operation();
        StateHasChanged();
    }

    private async Task OnCreateDialogClose(bool accepted) {
        CreateDialogOpen = false;
        if (accepted) {
            await OperationsService.CreateAsync(currentOperation);
        }
        StateHasChanged();
        await OnUpdateCallback.InvokeAsync();
    }

   
    public bool UpdateDialogOpen { get; set; }

    private void OpenUpdateDialog(Operation operation) {
        currentOperation = operation;
        UpdateDialogOpen = true;
        StateHasChanged();
    }

    private async Task OnUpdateDialogClose(bool accepted) {
        UpdateDialogOpen = false;
        if (accepted) {
            await OperationsService.UpdateAsync(currentOperation);
        }
        StateHasChanged();
        await OnUpdateCallback.InvokeAsync();
    }
}